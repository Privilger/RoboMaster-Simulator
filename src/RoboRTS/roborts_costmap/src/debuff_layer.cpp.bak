/*
 * 通过 map_update来更新
 */

#include "debuff_layer_setting.pb.h"
#include "debuff_layer.h"

namespace roborts_costmap {

void DebuffLayer::OnInitialize() {
  ros::NodeHandle nh;
    ROS_ERROR("debuff layer init");
  is_current_ = true;
  ParaDebuffLayer para_debuff_layer;

  std::string debuff_map = ros::package::getPath("roborts_costmap") + \
      "/config/debuff_layer_config.prototxt";
  roborts_common::ReadProtoFromTextFile(debuff_map.c_str(), &para_debuff_layer);
  global_frame_ = layered_costmap_-> GetGlobalFrameID();
  first_map_only_ = para_debuff_layer.first_map_only();
  subscribe_to_updates_ = para_debuff_layer.subscribe_to_updates();
  track_unknown_space_ = para_debuff_layer.track_unknown_space();
  use_maximum_ = para_debuff_layer.use_maximum();
  int temp_threshold = para_debuff_layer.lethal_threshold();
  lethal_threshold_ = std::max(std::min(100, temp_threshold), 0);
  trinary_costmap_ = para_debuff_layer.trinary_map();
  unknown_cost_value_ = para_debuff_layer.unknown_cost_value();
  map_received_ = false;
  map_topic_ = para_debuff_layer.topic_name();
  map_sub_ = nh.subscribe(map_topic_.c_str(), 1, &DebuffLayer::InComingMap, this);
  ros::Rate temp_rate(10);
  while(!map_received_) {
    ros::spinOnce();
    temp_rate.sleep();
  }

    if (subscribe_to_updates_)
    {
        map_update_sub_ = nh.subscribe((map_topic_ + "_updates").c_str(), 10, &DebuffLayer::InComingUpdate, this);
    }

  debuff_layer_x_ = debuff_layer_y_ = 0;
  width_ = size_x_;
  height_ = size_y_;
  is_enabled_ = true;
  has_updated_data_ = true;

}

void DebuffLayer::MatchSize() {
  if (!layered_costmap_->IsRolling()) {
    Costmap2D* master = layered_costmap_->GetCostMap();
    ResizeMap(master->GetSizeXCell(), master->GetSizeYCell(), master->GetResolution(),
              master->GetOriginX(), master->GetOriginY());
  }
}

void DebuffLayer::InComingMap(const nav_msgs::OccupancyGridConstPtr &new_map) {
  unsigned int temp_index = 0;
  unsigned char value = 0;
  unsigned int size_x = new_map->info.width, size_y = new_map->info.height;
  auto resolution = new_map->info.resolution;
  auto origin_x = new_map->info.origin.position.x;
  auto origin_y = new_map->info.origin.position.y;
  auto master_map = layered_costmap_->GetCostMap();
  if(!layered_costmap_->IsRolling() && (master_map->GetSizeXCell() != size_x || master_map->GetSizeYCell() != size_y ||
      master_map->GetResolution() != resolution || master_map->GetOriginX() != origin_x || master_map->GetOriginY() != origin_y ||
      !layered_costmap_->IsSizeLocked())) {
    layered_costmap_->ResizeMap(size_x, size_y, resolution, origin_x, origin_y, true);
  } else if(size_x_ != size_x || size_y_ != size_y || resolution_ != resolution || origin_x_ != origin_x || origin_y_ != origin_y) {
    ResizeMap(size_x, size_y, resolution, origin_x, origin_y);
  }

  for (auto i = 0; i < size_y; i++) {
    for (auto j = 0; j < size_x; j++) {
      value = new_map->data[temp_index];
      costmap_[temp_index] = InterpretValue(value);
      ++temp_index;
    }
  }
  map_received_ = true;
  has_updated_data_ = true;
  map_frame_ = new_map->header.frame_id;
  debuff_layer_x_ = debuff_layer_y_ = 0;
  width_ = size_x_;
  height_ = size_y_;
  if (first_map_only_) {
    map_sub_.shutdown();
  }
}

    void DebuffLayer::InComingUpdate(const map_msgs::OccupancyGridUpdateConstPtr& update)
    {
        unsigned int di = 0;
        for (unsigned int y = 0; y < update->height ; y++)
        {
            unsigned int index_base = (update->y + y) * size_x_;
            for (unsigned int x = 0; x < update->width ; x++)
            {
                unsigned int index = index_base + x + update->x;
                costmap_[index] = InterpretValue(update->data[di++]);
            }
        }
//        x_ = update->x;
//        y_ = update->y;
        width_ = update->width;
        height_ = update->height;
        has_updated_data_ = true;
    }

unsigned char DebuffLayer::InterpretValue(unsigned char value) {

  // check if the static value is above the unknown or lethal thresholds
  if (track_unknown_space_ && value == unknown_cost_value_)
    return NO_INFORMATION;
  else if (!track_unknown_space_ && value == unknown_cost_value_)
    return FREE_SPACE;
  else if (value >= lethal_threshold_)
    return LETHAL_OBSTACLE;
  else if (trinary_costmap_)
    return FREE_SPACE;

  double scale = (double) value / lethal_threshold_;
  return scale * LETHAL_OBSTACLE;
}

void DebuffLayer::Activate() {
  OnInitialize();
}

void DebuffLayer::Deactivate() {
//    delete cost_map_;
  //shut down the map topic message subscriber
  map_sub_.shutdown();
    if (subscribe_to_updates_)
        map_update_sub_.shutdown();
}

void DebuffLayer::Reset() {
  if(first_map_only_) {
    has_updated_data_ = true;
  } else {
    OnInitialize();
  }
}

void DebuffLayer::UpdateBounds(double robot_x,
                               double robot_y,
                               double robot_yaw,
                               double *min_x,
                               double *min_y,
                               double *max_x,
                               double *max_y) {

  double wx, wy;
  if(!layered_costmap_->IsRollingWindow()) {
    if(!map_received_ || !(has_updated_data_ || has_extra_bounds_)) {
      return;
    }
  }
  //just make sure the value is normal
  UseExtraBounds(min_x, min_y, max_x, max_y);
  Map2World(debuff_layer_x_, debuff_layer_y_, wx, wy);
  *min_x = std::min(wx, *min_x);
  *min_y = std::min(wy, *min_y);
  Map2World(debuff_layer_x_+ width_, debuff_layer_y_ + height_, wx, wy);
  *max_x = std::max(*max_x, wx);
  *max_y = std::max(*max_y, wy);
  has_updated_data_ = false;

}

    void DebuffLayer::UpdateCosts(Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j) {
        if(!map_received_) {
            return;
        }
        if(!layered_costmap_->IsRollingWindow()) {
            if(!use_maximum_) {
                UpdateOverwriteByAll(master_grid, min_i, min_j, max_i, max_j);
            } else {
                UpdateOverwriteByMax(master_grid, min_i, min_j, max_i, max_j);
            }
        } else {
            unsigned int mx, my;
            double wx, wy;
            tf::StampedTransform temp_transform;
            try {
                tf_->lookupTransform(map_frame_, global_frame_, ros::Time(0), temp_transform);
            }
            catch (tf::TransformException ex) {
                ROS_ERROR("%s", ex.what());
                return;
            }

            for(auto i = min_i; i < max_i; ++i) {
                for(auto j = min_j; j < max_j; ++j) {
                    layered_costmap_->GetCostMap()->Map2World(i, j, wx, wy);
                    tf::Point p(wx, wy, 0);
                    p = temp_transform(p);
//                    ROS_ERROR("mx:%d, my:%d, wx:%f, wy:%f, px:%f, py:%f", mx, my, wx, wy, p.x(), p.y());
                    if(World2Map(p.x(), p.y(), mx, my)){
                        if(!use_maximum_) {
                            master_grid.SetCost(i, j, GetCost(mx, my));
                        }
                        else {
                            master_grid.SetCost(i, j, std::max(master_grid.GetCost(i, j), GetCost(i, j)));
                        }
                    }
                }
            }
        }
    }

} //namespace roborts_costmap

